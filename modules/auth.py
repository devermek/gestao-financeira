import streamlit as st
import hashlib
import os
import sys
import traceback
from config.database import get_db_connection # REMOVIDO: get_current_db_type

# ADICIONADO para lidar com tipos de retorno de banco de dados
import sqlite3 # Necess√°rio para referenciar sqlite3.Row
try:
    import psycopg2.extras
    RealDictRow = psycopg2.extras.RealDictRow # Necess√°rio para referenciar RealDictRow
except ImportError:
    # Define um tipo dummy caso psycopg2 n√£o esteja instalado (ex: ambiente SQLite)
    RealDictRow = type(None) 
# FIM DAS LINHAS A SEREM ADICIONADAS

# --- Fun√ß√µes de Autentica√ß√£o ---

def hash_password(password):
    """Cria um hash SHA256 da senha."""
    return hashlib.sha256(password.encode()).hexdigest()

def login_user(email, password):
    """
    Tenta autenticar um usu√°rio no banco de dados.
    Retorna o dicion√°rio do usu√°rio se a autentica√ß√£o for bem-sucedida, caso contr√°rio, None.
    """
    conn = None
    try:
        print(f"DEBUG AUTH: Tentando login para email: {email}", file=sys.stderr); sys.stderr.flush()
        conn, db_type = get_db_connection() # <-- AGORA OBTEMOS O TIPO DE DB REAL AQUI
        cursor = conn.cursor()

        param_placeholder = '%s' if db_type == 'postgresql' else '?' # <-- USADO O TIPO DE DB REAL

        hashed_password = hash_password(password)

        query = f"""
            SELECT id, nome, email, tipo, ativo FROM usuarios
            WHERE email = {param_placeholder} AND senha = {param_placeholder} AND ativo = 1
        """
        
        cursor.execute(query, (email, hashed_password))
        user_data = cursor.fetchone()
        
        if user_data:
            if isinstance(user_data, (dict, RealDictRow)) or (hasattr(user_data, 'keys') and hasattr(user_data, '__getitem__')):
                return {
                    'id': user_data['id'],
                    'nome': user_data['nome'],
                    'email': user_data['email'],
                    'tipo': user_data['tipo'],
                    'ativo': user_data['ativo']
                }
            elif isinstance(user_data, sqlite3.Row):
                return {
                    'id': user_data['id'],
                    'nome': user_data['nome'],
                    'email': user_data['email'],
                    'tipo': user_data['tipo'],
                    'ativo': user_data['ativo']
                }
            else:
                return {
                    'id': user_data[0],
                    'nome': user_data[1],
                    'email': user_data[2],
                    'tipo': user_data[3],
                    'ativo': user_data[4]
                }
        print(f"DEBUG AUTH: Login falhou para email: {email} (credenciais incorretas ou inativo).", file=sys.stderr); sys.stderr.flush()
        return None
    except Exception as e:
        print(f"DEBUG AUTH: ERRO CR√çTICO ao tentar login para email {email}: {e}", file=sys.stderr);
        traceback.print_exc(file=sys.stderr); sys.stderr.flush()
        return None
    finally:
        if conn:
            conn.close()

def show_login_page():
    """Exibe a p√°gina de login."""
    st.title("üîê Login")

    # Garante que um admin inicial exista
    ensure_first_admin_exists()

    # Campos de input
    email = st.text_input("Email", key="login_email_input")
    password = st.text_input("Senha", type="password", key="login_password_input")

    # Bot√£o de login
    if st.button("Entrar", type="primary"):
        if email and password:
            user = login_user(email, password)
            if user:
                st.session_state.user = user
                st.session_state.logged_in = True
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Email ou senha incorretos, ou usu√°rio inativo.")
        else:
            st.warning("Por favor, preencha todos os campos.")

def show_user_header(user, obra_config):
    """Exibe o cabe√ßalho superior da aplica√ß√£o com informa√ß√µes do usu√°rio e da obra."""
    st.markdown(f"""
        <div style="background-color: #2c3e50; padding: 10px; border-radius: 5px; margin-bottom: 20px; display: flex; justify-content: space-between; align-items: center;">
            <div style="color: white; font-size: 1.2em; font-weight: bold;">
                üèóÔ∏è {obra_config.get('nome_obra', 'NOME DA OBRA N√ÉO CONFIGURADO')}
            </div>
            <div style="color: #bdc3c7; font-size: 0.9em;">
                Usu√°rio: <strong>{user.get('nome', 'N/A')}</strong> ({user.get('tipo', 'N/A').title()})
            </div>
        </div>
    """, unsafe_allow_html=True)
    
    if st.sidebar.button("Sair", help="Fazer Logout"):
        st.session_state.user = None
        st.session_state.logged_in = False
        st.rerun()

def ensure_first_admin_exists():
    """
    Verifica se existe algum usu√°rio na tabela 'usuarios'.
    Se n√£o houver, cria um usu√°rio 'gestor' padr√£o.
    """
    conn = None
    try:
        print("DEBUG AUTH: ‚û°Ô∏è Iniciando ensure_first_admin_exists().", file=sys.stderr); sys.stderr.flush()
        conn, db_type = get_db_connection() # <-- AGORA OBTEMOS O TIPO DE DB REAL AQUI
        cursor = conn.cursor()
        
        print(f"DEBUG AUTH: Conectado ao DB. Tipo de DB: {db_type}. Executando COUNT(*) na tabela 'usuarios'.", file=sys.stderr); sys.stderr.flush()
        
        # Primeiro, verificamos se a tabela 'usuarios' existe para evitar um erro se ela n√£o foi criada
        if db_type == 'postgresql':
            cursor.execute("SELECT to_regclass('public.usuarios')")
        else: # sqlite
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='usuarios'")
        
        table_exists_result = cursor.fetchone()
        table_exists = table_exists_result[0] is not None if db_type == 'postgresql' else table_exists_result is not None
        
        if not table_exists:
            print("DEBUG AUTH: ‚ö†Ô∏è Tabela 'usuarios' N√ÉO EXISTE. init_db pode ter falhado ou n√£o foi executado corretamente.", file=sys.stderr); sys.stderr.flush()
            st.error("Erro: A tabela de usu√°rios n√£o existe. Contate o administrador. (DEBUG: Tabela 'usuarios' ausente)")
            return # Sai da fun√ß√£o se a tabela n√£o existe
        
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        count_result = cursor.fetchone()
        count = count_result[0] if count_result else 0 # Garante 0 se n√£o h√° resultado

        print(f"DEBUG AUTH: COUNT(*) de usu√°rios retornou: {count}.", file=sys.stderr); sys.stderr.flush()

        if count == 0:
            print("DEBUG AUTH: Nenhum usu√°rio encontrado. Iniciando cria√ß√£o do usu√°rio administrador padr√£o.", file=sys.stderr); sys.stderr.flush()
            st.warning("Nenhum usu√°rio encontrado. Criando usu√°rio administrador padr√£o.")
            
            # Credenciais do admin: use vari√°veis de ambiente para produ√ß√£o, padr√µes para desenvolvimento
            default_admin_email = os.getenv("ADMIN_EMAIL", "admin@obra.com")
            default_admin_password = os.getenv("ADMIN_PASSWORD", "admin") # Mude isso para algo seguro em produ√ß√£o!
            hashed_default_password = hash_password(default_admin_password)

            param_placeholder_str = '%s' if db_type == 'postgresql' else '?' # <-- USADO O TIPO DE DB REAL

            insert_query = f"""
                INSERT INTO usuarios (nome, email, senha, tipo, ativo)
                VALUES ({param_placeholder_str}, {param_placeholder_str}, {param_placeholder_str}, {param_placeholder_str}, 1)
            """
            print(f"DEBUG AUTH: Executando INSERT do admin: Email='{default_admin_email}' Tipo='gestor'.", file=sys.stderr); sys.stderr.flush()
            cursor.execute(insert_query, ("Administrador", default_admin_email, hashed_default_password, "gestor"))
            conn.commit()
            print("DEBUG AUTH: ‚úÖ INSERT e COMMIT do admin OK. Usu√°rio criado.", file=sys.stderr); sys.stderr.flush()
            st.success(f"Usu√°rio administrador criado: Email '{default_admin_email}', Senha '{default_admin_password}'. Por favor, fa√ßa login.")
            st.info("‚ö†Ô∏è Recomendamos alterar a senha ap√≥s o primeiro login.")
        else:
            print(f"DEBUG AUTH: Usu√°rios j√° existem ({count}). Nenhuma a√ß√£o de cria√ß√£o de admin necess√°ria.", file=sys.stderr); sys.stderr.flush()
            
    except Exception as e:
        error_message = f"Erro ao verificar/criar usu√°rio administrador inicial: {e}"
        print(f"DEBUG AUTH: ‚ùå ERRO CR√çTICO em ensure_first_admin_exists()!", file=sys.stderr)
        print(f"DEBUG AUTH: Mensagem do erro: {error_message}", file=sys.stderr)
        print(f"DEBUG AUTH: Tipo do erro: {type(e)}", file=sys.stderr)
        print(f"DEBUG AUTH: Representa√ß√£o completa do erro: {repr(e)}", file=sys.stderr)
        traceback.print_exc(file=sys.stderr) # Imprimir o traceback COMPLETO
        sys.stderr.flush() # For√ßar o flush dos logs imediatamente
        st.error(error_message) # Mostrar o erro detalhado na UI
    finally:
        if conn:
            print("DEBUG AUTH: Fechando conex√£o com o DB.", file=sys.stderr); sys.stderr.flush()
            conn.close()

if __name__ == "__main__":
    st.set_page_config(layout="centered")
    show_login_page()