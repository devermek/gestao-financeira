import streamlit as st
import pandas as pd
from config.database import get_db_connection, get_current_db_type
from modules.auth import hash_password # Reutiliza a fun√ß√£o de hashing de senha

def show_usuarios(current_user):
    """Exibe a p√°gina de gest√£o de usu√°rios."""
    st.header("ÔøΩÔøΩ Gest√£o de Usu√°rios")
    st.success(f"DEBUG: show_usuarios chamado. Usu√°rio logado: {current_user.get('nome', 'N/A')} ({current_user.get('tipo', 'N/A')})") # DEBUG LINE

    # Apenas usu√°rios do tipo 'gestor' podem gerenciar outros usu√°rios
    if current_user['tipo'] != 'gestor':
        st.warning("Voc√™ n√£o tem permiss√£o para gerenciar usu√°rios. Por favor, contate o administrador.")
        st.success("DEBUG: Usu√°rio N√ÉO √© gestor, retornando.") # DEBUG LINE
        return

    st.success("DEBUG: Usu√°rio √© gestor, renderizando abas.") # DEBUG LINE
    # Abas para organizar o conte√∫do
    tab1, tab2 = st.tabs(["üìã Listar Usu√°rios", "‚ûï Adicionar Novo Usu√°rio"])

    with tab1:
        st.success("DEBUG: Entrando na aba 'Listar Usu√°rios'.") # DEBUG LINE
        _show_listar_usuarios(current_user)
    
    with tab2:
        st.success("DEBUG: Entrando na aba 'Adicionar Novo Usu√°rio'.") # DEBUG LINE
        _show_adicionar_usuario()

def _show_listar_usuarios(current_user):
    """Exibe a lista de usu√°rios cadastrados com op√ß√µes de edi√ß√£o/desativa√ß√£o."""
    st.subheader("üìã Usu√°rios Cadastrados")
    st.success("DEBUG: _show_listar_usuarios chamado.") # DEBUG LINE
    
    conn = None # Initialize conn
    try:
        conn = get_db_connection()
        query = "SELECT id, nome, email, tipo, ativo, created_at FROM usuarios ORDER BY nome"
        df = pd.read_sql_query(query, conn)
        
        if df.empty:
            st.info("Nenhum usu√°rio cadastrado al√©m do administrador padr√£o.")
            st.success("DEBUG: Nenhum usu√°rio adicional cadastrado.") # DEBUG LINE
            return

        st.success(f"DEBUG: {len(df)} usu√°rios encontrados para listar.") # DEBUG LINE
        # Exibe cada usu√°rio em um expander para detalhes e edi√ß√£o
        for index, user in df.iterrows():
            user_status = "Ativo" if user['ativo'] == 1 else "Inativo"
            status_emoji = "‚úÖ" if user['ativo'] == 1 else "‚ùå"
            
            with st.expander(f"{status_emoji} {user['nome']} ({user['tipo'].title()}) - {user['email']}"):
                st.write(f"**ID:** {user['id']}")
                st.write(f"**Email:** {user['email']}")
                st.write(f"**Tipo:** {user['tipo'].title()}")
                st.write(f"**Status:** {user_status}")
                st.write(f"**Criado em:** {user['created_at']}")

                # Formul√°rio para editar este usu√°rio espec√≠fico
                with st.form(key=f"edit_user_form_{user['id']}"):
                    st.markdown("##### Editar Usu√°rio")
                    col1, col2 = st.columns(2)
                    with col1:
                        new_name = st.text_input("Nome", value=user['nome'], key=f"edit_name_{user['id']}")
                        new_email = st.text_input("Email", value=user['email'], key=f"edit_email_{user['id']}")
                    with col2:
                        # Index para o selectbox
                        tipo_index = 0 if user['tipo'] == "gestor" else 1
                        new_type = st.selectbox("Tipo", ["gestor", "investidor"], index=tipo_index, key=f"edit_type_{user['id']}")
                        new_status = st.checkbox("Ativo", value=user['ativo'] == 1, key=f"edit_status_{user['id']}")
                    
                    st.info("Deixe o campo de senha em branco para n√£o alterar a senha atual.")
                    new_password = st.text_input("Nova Senha", type="password", key=f"edit_password_{user['id']}")
                    confirm_new_password = st.text_input("Confirmar Nova Senha", type="password", key=f"confirm_edit_password_{user['id']}")

                    col_buttons = st.columns([1, 1, 1]) # 3 colunas para os bot√µes
                    with col_buttons[0]:
                        if st.form_submit_button("üíæ Salvar Altera√ß√µes", type="primary", key=f"save_edit_{user['id']}"):
                            _update_user(user['id'], new_name, new_email, new_type, 1 if new_status else 0, new_password, confirm_new_password)
                    with col_buttons[1]:
                        # Bot√£o para alternar status (Ativar/Desativar)
                        btn_label = "‚ùå Desativar Usu√°rio" if user['ativo'] == 1 else "‚úÖ Ativar Usu√°rio"
                        if st.form_submit_button(btn_label, type="secondary", key=f"toggle_status_{user['id']}"):
                            if current_user['id'] == user['id']:
                                st.error("Voc√™ n√£o pode desativar sua pr√≥pria conta.")
                            else:
                                _toggle_user_status(user['id'], 1 if user['ativo'] == 0 else 0) # Inverte o status
                    with col_buttons[2]:
                        # Bot√£o de exclus√£o
                        if st.form_submit_button("üóëÔ∏è Excluir Usu√°rio", type="secondary", key=f"delete_user_{user['id']}"):
                            if current_user['id'] == user['id']:
                                st.error("Voc√™ n√£o pode excluir sua pr√≥pria conta enquanto estiver logado.")
                            else:
                                # Confirma√ß√£o antes de excluir
                                st.warning(f"Tem certeza que deseja excluir o usu√°rio '{user['nome']}'? Esta a√ß√£o √© irrevers√≠vel.")
                                if st.button(f"Sim, Excluir {user['nome']}", key=f"confirm_delete_{user['id']}"):
                                    _delete_user(user['id'])

    except Exception as e:
        st.error(f"‚ùå Erro ao listar usu√°rios: {e}")
        st.error(f"DEBUG: Erro em _show_listar_usuarios: {e}") # DEBUG LINE
        # import traceback
        # st.code(traceback.format_exc()) # Descomente para debug mais aprofundado
    finally:
        if conn:
            conn.close()

def _show_adicionar_usuario():
    """Exibe o formul√°rio para adicionar um novo usu√°rio."""
    st.subheader("‚ûï Adicionar Novo Usu√°rio")
    st.success("DEBUG: _show_adicionar_usuario chamado.") # DEBUG LINE
    with st.form("add_user_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        with col1:
            nome = st.text_input("Nome Completo", key="add_user_name")
            email = st.text_input("Email", key="add_user_email")
        with col2:
            tipo = st.selectbox("Tipo de Usu√°rio", ["gestor", "investidor"], key="add_user_type")
            status_ativo = st.checkbox("Ativo", value=True, key="add_user_active")
        
        password = st.text_input("Senha", type="password", key="add_user_password")
        confirm_password = st.text_input("Confirmar Senha", type="password", key="add_user_confirm_password")

        if st.form_submit_button("‚úÖ Criar Usu√°rio", type="primary"):
            _add_new_user(nome, email, tipo, 1 if status_ativo else 0, password, confirm_password)

def _add_new_user(nome, email, tipo, ativo, password, confirm_password):
    """L√≥gica para adicionar um novo usu√°rio ao banco de dados."""
    st.success("DEBUG: _add_new_user chamado para adicionar.") # DEBUG LINE
    # Valida√ß√£o b√°sica
    if not nome or not email or not password or not confirm_password:
        st.error("‚ùå Todos os campos obrigat√≥rios (Nome, Email, Senha, Confirma√ß√£o) devem ser preenchidos.")
        st.success("DEBUG: Valida√ß√£o falhou: Campos obrigat√≥rios ausentes.") # DEBUG LINE
        return
    if password != confirm_password:
        st.error("‚ùå A senha e a confirma√ß√£o de senha n√£o coincidem.")
        st.success("DEBUG: Valida√ß√£o falhou: Senhas n√£o coincidem.") # DEBUG LINE
        return
    if len(password) < 6: # Exemplo de pol√≠tica de senha
        st.error("‚ùå A senha deve ter no m√≠nimo 6 caracteres.")
        st.success("DEBUG: Valida√ß√£o falhou: Senha muito curta.") # DEBUG LINE
        return
    
    # Valida√ß√£o de formato de email (pode ser mais robusta com regex)
    if "@" not in email or "." not in email:
        st.error("‚ùå Formato de email inv√°lido.")
        st.success("DEBUG: Valida√ß√£o falhou: Email inv√°lido.") # DEBUG LINE
        return

    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        db_type = get_current_db_type()
        param_placeholder = '%s' if db_type == 'postgresql' else '?'

        # Verificar se o email j√° existe
        cursor.execute(f"SELECT COUNT(*) FROM usuarios WHERE email = {param_placeholder}", (email,))
        if cursor.fetchone()[0] > 0:
            st.error(f"‚ùå J√° existe um usu√°rio com o email '{email}'.")
            st.success(f"DEBUG: Valida√ß√£o falhou: Email '{email}' j√° existe.") # DEBUG LINE
            return

        hashed_password = hash_password(password)

        insert_query = f"""
            INSERT INTO usuarios (nome, email, senha, tipo, ativo)
            VALUES ({param_placeholder}, {param_placeholder}, {param_placeholder}, {param_placeholder}, {param_placeholder})
        """
        cursor.execute(insert_query, (nome, email, hashed_password, tipo, ativo))
        conn.commit()
        st.success(f"üéâ Usu√°rio '{nome}' ({email}) criado com sucesso!")
        st.success("DEBUG: Usu√°rio adicionado com sucesso. Recarregando.") # DEBUG LINE
        st.rerun() # Atualiza a p√°gina para mostrar o novo usu√°rio na lista
    except Exception as e:
        st.error(f"‚ùå Erro ao criar usu√°rio: {e}")
        st.error(f"DEBUG: Erro ao adicionar usu√°rio: {e}") # DEBUG LINE
        # import traceback
        # st.code(traceback.format_exc()) # Descomente para debug
    finally:
        if conn:
            conn.close()

def _update_user(user_id, new_name, new_email, new_type, new_status_int, new_password, confirm_new_password):
    """L√≥gica para atualizar um usu√°rio existente."""
    st.success(f"DEBUG: _update_user chamado para ID {user_id}.") # DEBUG LINE
    # Valida√ß√£o similar √† adi√ß√£o, mas para atualiza√ß√£o
    if not new_name or not new_email:
        st.error("‚ùå Nome e Email s√£o campos obrigat√≥rios.")
        st.success("DEBUG: Valida√ß√£o falhou: Nome/Email ausentes na atualiza√ß√£o.") # DEBUG LINE
        return
    if new_password and new_password != confirm_new_password:
        st.error("‚ùå A nova senha e a confirma√ß√£o de senha n√£o coincidem.")
        st.success("DEBUG: Valida√ß√£o falhou: Senhas n√£o coincidem na atualiza√ß√£o.") # DEBUG LINE
        return
    if new_password and len(new_password) < 6:
        st.error("‚ùå A nova senha deve ter no m√≠nimo 6 caracteres.")
        st.success("DEBUG: Valida√ß√£o falhou: Senha muito curta na atualiza√ß√£o.") # DEBUG LINE
        return
    if "@" not in new_email or "." not in new_email:
        st.error("‚ùå Formato de email inv√°lido.")
        st.success("DEBUG: Valida√ß√£o falhou: Email inv√°lido na atualiza√ß√£o.") # DEBUG LINE
        return

    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        db_type = get_current_db_type()
        param_placeholder = '%s' if db_type == 'postgresql' else '?'

        # Verificar se o novo email j√° existe para outro usu√°rio (excluindo o usu√°rio atual)
        cursor.execute(f"SELECT COUNT(*) FROM usuarios WHERE email = {param_placeholder} AND id != {param_placeholder}", (new_email, user_id))
        if cursor.fetchone()[0] > 0:
            st.error(f"‚ùå J√° existe outro usu√°rio com o email '{new_email}'.")
            st.success(f"DEBUG: Valida√ß√£o falhou: Email '{new_email}' j√° existe para outro usu√°rio.") # DEBUG LINE
            return

        update_fields = ["nome", "email", "tipo", "ativo"]
        update_values = [new_name, new_email, new_type, new_status_int]
        
        if new_password: # Se uma nova senha foi fornecida
            update_fields.append("senha")
            update_values.append(hash_password(new_password))

        # Constr√≥i a query dinamicamente
        update_query = f"UPDATE usuarios SET {', '.join([f'{field} = {param_placeholder}' for field in update_fields])} WHERE id = {param_placeholder}"
        cursor.execute(update_query, tuple(update_values + [user_id]))
        conn.commit()
        st.success(f"üéâ Usu√°rio ID {user_id} atualizado com sucesso!")
        st.success("DEBUG: Usu√°rio atualizado com sucesso. Recarregando.") # DEBUG LINE
        st.rerun()
    except Exception as e:
        st.error(f"‚ùå Erro ao atualizar usu√°rio: {e}")
        st.error(f"DEBUG: Erro ao atualizar usu√°rio: {e}") # DEBUG LINE
        # import traceback
        # st.code(traceback.format_exc()) # Descomente para debug
    finally:
        if conn:
            conn.close()

def _toggle_user_status(user_id, new_status_int):
    """L√≥gica para ativar ou desativar um usu√°rio."""
    st.success(f"DEBUG: _toggle_user_status chamado para ID {user_id}, novo status: {new_status_int}.") # DEBUG LINE
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        db_type = get_current_db_type()
        param_placeholder = '%s' if db_type == 'postgresql' else '?'
        
        cursor.execute(f"UPDATE usuarios SET ativo = {param_placeholder} WHERE id = {param_placeholder}", (new_status_int, user_id))
        conn.commit()
        status_text = "ativado" if new_status_int == 1 else "desativado"
        st.success(f"ÔøΩÔøΩ Usu√°rio ID {user_id} {status_text} com sucesso!")
        st.success("DEBUG: Status do usu√°rio alterado com sucesso. Recarregando.") # DEBUG LINE
        st.rerun()
    except Exception as e:
        st.error(f"‚ùå Erro ao alternar status do usu√°rio: {e}")
        st.error(f"DEBUG: Erro ao alternar status do usu√°rio: {e}") # DEBUG LINE
        # import traceback
        # st.code(traceback.format_exc()) # Descomente para debug
    finally:
        if conn:
            conn.close()

def _delete_user(user_id):
    """L√≥gica para excluir um usu√°rio."""
    st.success(f"DEBUG: _delete_user chamado para ID {user_id}.") # DEBUG LINE
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        db_type = get_current_db_type()
        param_placeholder = '%s' if db_type == 'postgresql' else '?'

        # Antes de deletar o usu√°rio, √© importante deletar quaisquer lan√ßamentos
        # ou arquivos associados para evitar erros de FOREIGN KEY, ou configurar CASCADE DELETE na tabela.
        # Por simplicidade, aqui vamos focar apenas no delete do usu√°rio,
        # mas em um sistema real, essa l√≥gica de integridade √© crucial.

        cursor.execute(f"DELETE FROM usuarios WHERE id = {param_placeholder}", (user_id,))
        conn.commit()
        st.success(f"üéâ Usu√°rio ID {user_id} exclu√≠do permanentemente com sucesso!")
        st.success("DEBUG: Usu√°rio exclu√≠do com sucesso. Recarregando.") # DEBUG LINE
        st.rerun()
    except Exception as e:
        st.error(f"‚ùå Erro ao excluir usu√°rio: {e}")
        st.info("Verifique se h√° lan√ßamentos ou arquivos associados a este usu√°rio que precisam ser tratados primeiro.")
        st.error(f"DEBUG: Erro ao excluir usu√°rio: {e}") # DEBUG LINE
        # import traceback
        # st.code(traceback.format_exc()) # Descomente para debug
    finally:
        if conn:
            conn.close()
