import streamlit as st
import sys
import os

# Configura√ß√£o da p√°gina (deve ser a primeira chamada Streamlit)
st.set_page_config(
    page_title="Sistema de Gest√£o Financeira - Obras",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Adiciona o diret√≥rio raiz ao path para imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Imports dos m√≥dulos
from utils.styles import load_css
from modules.dashboard import show_dashboard
from modules.lancamentos import show_lancamentos
from modules.relatorios import show_relatorios
from modules.configuracoes import show_configuracoes
from config.database import init_db, test_connection

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Carrega estilos CSS
    load_css()
    
    # Inicializa banco se necess√°rio (apenas uma vez por sess√£o)
    if 'db_initialized' not in st.session_state:
        init_system_if_needed()
        st.session_state.db_initialized = True
    
    # Interface principal
    show_main_interface()

def init_system_if_needed():
    """Inicializa sistema automaticamente se necess√°rio"""
    try:
        # Testa conex√£o
        if not test_connection():
            st.error("‚ùå Erro de conex√£o com banco de dados!")
            return
        
        # Verifica se precisa inicializar
        if is_first_run():
            with st.spinner("üîß Inicializando sistema pela primeira vez..."):
                init_db()
                create_initial_data()
                st.success("‚úÖ Sistema inicializado com sucesso!")
                # Remove o spinner e n√£o faz rerun
                
    except Exception as e:
        st.error(f"‚ùå Erro na inicializa√ß√£o: {str(e)}")
        print(f"Erro na inicializa√ß√£o: {repr(e)}", file=sys.stderr)

def is_first_run():
    """Verifica se √© a primeira execu√ß√£o"""
    try:
        from config.database import get_connection
        conn = get_connection()
        cursor = conn.cursor()
        
        # Verifica se existe tabela obras e se tem dados
        import os
        is_postgres = os.getenv('DATABASE_URL') is not None
        
        if is_postgres:
            # Verifica se tabela existe
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' AND table_name = 'obras'
                )
            """)
            table_exists = cursor.fetchone()[0]
            
            if not table_exists:
                cursor.close()
                conn.close()
                return True
            
            # Verifica se tem dados
            cursor.execute("SELECT COUNT(*) as count FROM obras")
            result = cursor.fetchone()
            count = result['count'] if result else 0
            
        else:
            # SQLite
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='obras'
            """)
            table_exists = cursor.fetchone()
            
            if not table_exists:
                cursor.close()
                conn.close()
                return True
            
            # Verifica se tem dados
            cursor.execute("SELECT COUNT(*) as count FROM obras")
            result = cursor.fetchone()
            count = result['count'] if result else 0
        
        cursor.close()
        conn.close()
        
        # Se n√£o tem dados, √© primeira execu√ß√£o
        return count == 0
            
    except Exception as e:
        print(f"Erro ao verificar primeira execu√ß√£o: {repr(e)}", file=sys.stderr)
        # Em caso de erro, assume que N√ÉO √© primeira execu√ß√£o para evitar loop
        return False

def create_initial_data():
    """Cria dados iniciais do sistema"""
    try:
        from config.database import get_connection
        from datetime import date, timedelta
        
        conn = get_connection()
        cursor = conn.cursor()
        
        import os
        is_postgres = os.getenv('DATABASE_URL') is not None
        
        # Verifica se j√° existem dados para evitar duplica√ß√£o
        cursor.execute("SELECT COUNT(*) as count FROM categorias")
        result = cursor.fetchone()
        categoria_count = result['count'] if result else 0
        
        if categoria_count > 0:
            print("Dados iniciais j√° existem, pulando cria√ß√£o...", file=sys.stderr)
            cursor.close()
            conn.close()
            return
        
        # Cria categorias padr√£o
        categorias_padrao = [
            ("Material de Constru√ß√£o", "Materiais b√°sicos como cimento, areia, brita", "#e74c3c"),
            ("M√£o de Obra", "Pagamentos de funcion√°rios e prestadores", "#3498db"),
            ("Ferramentas e Equipamentos", "Compra e aluguel de ferramentas", "#f39c12"),
            ("El√©trica", "Material e servi√ßos el√©tricos", "#9b59b6"),
            ("Hidr√°ulica", "Material e servi√ßos hidr√°ulicos", "#1abc9c"),
            ("Acabamento", "Materiais de acabamento e pintura", "#34495e"),
            ("Documenta√ß√£o", "Taxas, licen√ßas e documentos", "#95a5a6"),
            ("Transporte", "Fretes e transportes diversos", "#e67e22"),
            ("Alimenta√ß√£o", "Alimenta√ß√£o da equipe", "#27ae60"),
            ("Outros", "Gastos diversos n√£o categorizados", "#7f8c8d")
        ]
        
        for nome, descricao, cor in categorias_padrao:
            if is_postgres:
                cursor.execute("""
                    INSERT INTO categorias (nome, descricao, cor, ativo)
                    VALUES (%s, %s, %s, TRUE)
                """, (nome, descricao, cor))
            else:
                cursor.execute("""
                    INSERT INTO categorias (nome, descricao, cor, ativo)
                    VALUES (?, ?, ?, 1)
                """, (nome, descricao, cor))
        
        # Verifica se j√° existe obra
        cursor.execute("SELECT COUNT(*) as count FROM obras")
        result = cursor.fetchone()
        obra_count = result['count'] if result else 0
        
        if obra_count == 0:
            # Cria obra padr√£o
            data_inicio = date.today()
            data_fim = data_inicio + timedelta(days=365)
            
            if is_postgres:
                cursor.execute("""
                    INSERT INTO obras (nome, orcamento, data_inicio, data_fim_prevista, ativo)
                    VALUES (%s, %s, %s, %s, TRUE)
                """, ("Minha Obra", 100000.00, data_inicio, data_fim))
            else:
                cursor.execute("""
                    INSERT INTO obras (nome, orcamento, data_inicio, data_fim_prevista, ativo)
                    VALUES (?, ?, ?, ?, 1)
                """, ("Minha Obra", 100000.00, data_inicio, data_fim))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print("Dados iniciais criados com sucesso!", file=sys.stderr)
        
    except Exception as e:
        print(f"Erro ao criar dados iniciais: {repr(e)}", file=sys.stderr)
        if 'conn' in locals():
            conn.rollback()
            cursor.close()
            conn.close()

def show_main_interface():
    """Interface principal do sistema"""
    
    # Cabe√ßalho principal
    st.markdown("""
    <div style="text-align: center; padding: 1rem 0; background: linear-gradient(90deg, #1f77b4, #2ca02c); color: white; border-radius: 10px; margin-bottom: 2rem;">
        <h1 style="margin: 0;">üèóÔ∏è Sistema de Gest√£o Financeira</h1>
        <p style="margin: 0; opacity: 0.9;">Controle completo dos gastos da sua obra</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar com navega√ß√£o
    with st.sidebar:
        # CSS espec√≠fico para sidebar
        st.markdown("""
        <style>
        .sidebar-content {
            color: #333 !important;
        }
        .sidebar-content .stSelectbox label {
            color: #333 !important;
            font-weight: bold !important;
        }
        .sidebar-content .stSelectbox > div > div {
            background-color: white !important;
            color: #333 !important;
        }
        
        /* Mobile: for√ßa sidebar vis√≠vel */
        @media (max-width: 768px) {
            .css-1d391kg {
                position: relative !important;
                width: 100% !important;
                min-width: 100% !important;
                transform: none !important;
            }
            
            .css-1d391kg .sidebar-content {
                padding: 1rem !important;
            }
            
            .stButton > button {
                font-size: 16px !important;
                padding: 12px 16px !important;
                margin: 4px 0 !important;
                width: 100% !important;
            }
        }
        </style>
        <div class="sidebar-content">
        """, unsafe_allow_html=True)
        
        # Header da sidebar
        st.markdown("### üß≠ Navega√ß√£o")
        
        # Detecta se √© mobile (aproxima√ß√£o)
        is_mobile = st.checkbox("üì± Modo Mobile", value=False, help="Ative para melhor experi√™ncia mobile")
        
        if is_mobile:
            # Navega√ß√£o simplificada para mobile
            st.markdown("#### Acesso R√°pido")
            
            if st.button("üìä Dashboard", use_container_width=True, key="nav_dashboard"):
                st.session_state.current_page = "üìä Dashboard"
                st.rerun()
            
            if st.button("üí∞ Lan√ßamentos", use_container_width=True, key="nav_lancamentos"):
                st.session_state.current_page = "üí∞ Lan√ßamentos"
                st.rerun()
            
            if st.button("üìà Relat√≥rios", use_container_width=True, key="nav_relatorios"):
                st.session_state.current_page = "ÔøΩÔøΩ Relat√≥rios"
                st.rerun()
            
            if st.button("‚öôÔ∏è Configura√ß√µes", use_container_width=True, key="nav_config"):
                st.session_state.current_page = "‚öôÔ∏è Configura√ß√µes"
                st.rerun()
        
        else:
            # Navega√ß√£o normal para desktop
            page_options = [
                "üìä Dashboard",
                "üí∞ Lan√ßamentos", 
                "üìà Relat√≥rios",
                "‚öôÔ∏è Configura√ß√µes"
            ]
            
            # Usa session state para manter sele√ß√£o
            if 'current_page' not in st.session_state:
                st.session_state.current_page = "üìä Dashboard"
            
            # Seletor de p√°gina
            selected_page = st.selectbox(
                "Selecione uma p√°gina:",
                options=page_options,
                index=page_options.index(st.session_state.current_page) if st.session_state.current_page in page_options else 0,
                key="page_selector"
            )
            
            # Atualiza session state
            st.session_state.current_page = selected_page
            
            st.markdown("---")
            
            # Bot√µes de navega√ß√£o alternativos
            st.markdown("### üì± Navega√ß√£o R√°pida")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üìä", help="Dashboard", use_container_width=True):
                    st.session_state.current_page = "üìä Dashboard"
                    st.rerun()
                if st.button("üí∞", help="Lan√ßamentos", use_container_width=True):
                    st.session_state.current_page = "üí∞ Lan√ßamentos"
                    st.rerun()
            
            with col2:
                if st.button("üìà", help="Relat√≥rios", use_container_width=True):
                    st.session_state.current_page = "üìà Relat√≥rios"
                    st.rerun()
                if st.button("‚öôÔ∏è", help="Configura√ß√µes", use_container_width=True):
                    st.session_state.current_page = "‚öôÔ∏è Configura√ß√µes"
                    st.rerun()
        
        st.markdown("---")
        
        # Informa√ß√µes do sistema
        st.markdown("### ‚ÑπÔ∏è Sistema")
        st.markdown("""
        <div style="color: #333;">
        üèóÔ∏è <strong>Gest√£o Financeira de Obras</strong><br>
        üì± <strong>Vers√£o:</strong> 1.0.0<br>
        üë®‚Äçüíª <strong>Desenvolvido por:</strong> Deverson
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Bot√£o de reset/reinicializa√ß√£o
        if st.button("üîÑ Reinicializar Sistema", use_container_width=True, help="Limpa cache e reinicia"):
            # Limpa session state
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
        
        # Bot√£o para for√ßar re-inicializa√ß√£o do banco
        if st.button("üóÉÔ∏è Recriar Banco", use_container_width=True, help="Recria todas as tabelas"):
            try:
                with st.spinner("Recriando banco de dados..."):
                    init_db()
                    create_initial_data()
                    # Limpa flag de inicializa√ß√£o
                    if 'db_initialized' in st.session_state:
                        del st.session_state['db_initialized']
                    st.success("‚úÖ Banco recriado com sucesso!")
            except Exception as e:
                st.error(f"‚ùå Erro ao recriar banco: {str(e)}")
        
        # Status do sistema
        st.markdown("### üîß Status do Sistema")
        
        # Verifica conex√£o com banco
        if test_connection():
            st.success("üü¢ Banco conectado")
        else:
            st.error("üî¥ Erro no banco")
        
        # Informa√ß√µes da obra atual
        try:
            from utils.helpers import get_obra_config
            obra = get_obra_config()
            if obra and obra.get('id'):
                st.info(f"üèóÔ∏è Obra: {obra['nome']}")
            else:
                st.warning("‚ö†Ô∏è Nenhuma obra configurada")
        except:
            st.error("‚ùå Erro ao carregar obra")
        
        st.markdown("---")
        
        # Links √∫teis
        st.markdown("### üîó Links √öteis")
        st.markdown("""
        <div style="color: #333;">
        üìö <a href="https://github.com"  style="color: #1f77b4;">Documenta√ß√£o</a><br>
        üêõ <a href="https://github.com"  style="color: #1f77b4;">Reportar Bug</a><br>
        üí° <a href="https://github.com"  style="color: #1f77b4;">Sugest√µes</a>
        </div>
        """, unsafe_allow_html=True)
        
        # Debug info (apenas em desenvolvimento)
        if os.getenv('DEBUG', 'False').lower() == 'true':
            st.markdown("---")
            st.markdown("### üêõ Debug Info")
            st.json({
                "session_state_keys": list(st.session_state.keys()),
                "current_page": st.session_state.get('current_page', 'None'),
                "db_initialized": st.session_state.get('db_initialized', False),
                "database_url_exists": bool(os.getenv('DATABASE_URL'))
            })
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Container principal
    with st.container():
        # Roteamento de p√°ginas
        current_page = st.session_state.get('current_page', "üìä Dashboard")
        
        # Adiciona CSS mobile global
        st.markdown("""
        <style>
        /* CSS Mobile Global */
        @media (max-width: 768px) {
            .main .block-container {
                padding: 1rem 0.5rem;
                max-width: 100%;
            }
            
            .stButton > button {
                font-size: 16px !important;
                padding: 12px 16px !important;
                margin: 4px 0 !important;
                width: 100% !important;
            }
            
            .stSelectbox > div > div {
                font-size: 16px !important;
            }
            
            .stTextInput > div > div > input {
                font-size: 16px !important;
                padding: 12px !important;
            }
            
            .stNumberInput > div > div > input {
                font-size: 16px !important;
                padding: 12px !important;
            }
            
            .stTextArea > div > div > textarea {
                font-size: 16px !important;
                padding: 12px !important;
            }
            
            /* For√ßa sidebar sempre vis√≠vel em mobile */
            .css-1d391kg {
                position: relative !important;
                width: 100% !important;
                min-width: 100% !important;
                transform: none !important;
                left: 0 !important;
            }
            
            /* Melhora m√©tricas em mobile */
            [data-testid="metric-container"] {
                margin: 8px 0 !important;
                padding: 12px !important;
            }
            
            /* Melhora gr√°ficos em mobile */
            .js-plotly-plot {
                width: 100% !important;
            }
            
            .plotly-graph-div {
                width: 100% !important;
            }
        }
        
        /* Melhora geral da interface */
        .stMetric {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin: 0.5rem 0;
        }
        
        .stAlert {
            border-radius: 8px;
            margin: 0.5rem 0;
        }
        
        /* Bot√£o flutuante para mobile */
        .mobile-nav-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 999;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        </style>
        """, unsafe_allow_html=True)
        
        # Navega√ß√£o de p√°ginas
        try:
            if current_page == "üìä Dashboard":
                show_dashboard()
            elif current_page == "üí∞ Lan√ßamentos":
                show_lancamentos()
            elif current_page == "ÔøΩÔøΩ Relat√≥rios":
                show_relatorios()
            elif current_page == "‚öôÔ∏è Configura√ß√µes":
                show_configuracoes()
            else:
                # P√°gina padr√£o
                st.session_state.current_page = "üìä Dashboard"
                show_dashboard()
                
        except Exception as e:
            st.error("üö® Erro ao carregar p√°gina!")
            
            # Em desenvolvimento, mostra detalhes do erro
            if os.getenv('DEBUG', 'False').lower() == 'true':
                st.exception(e)
            else:
                st.info("Por favor, tente navegar para outra p√°gina ou recarregue o sistema.")
            
            # Log do erro
            print(f"Erro ao carregar p√°gina {current_page}: {repr(e)}", file=sys.stderr)
            
            # Bot√£o para voltar ao dashboard
            if st.button("üè† Voltar ao Dashboard"):
                st.session_state.current_page = "üìä Dashboard"
                st.rerun()
    
    # Footer
    show_footer()

def show_footer():
    """Exibe rodap√© da aplica√ß√£o"""
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### üèóÔ∏è Sistema de Gest√£o Financeira")
        st.caption("Controle completo dos gastos da sua obra")
    
    with col2:
        st.markdown("### üìä Funcionalidades")
        st.caption("‚úÖ Dashboard interativo")
        st.caption("‚úÖ Controle de lan√ßamentos")
        st.caption("‚úÖ Upload de comprovantes")
        st.caption("‚úÖ Relat√≥rios detalhados")
    
    with col3:
        st.markdown("### üîß Suporte")
        st.caption("üìß suporte@sistema.com")
        st.caption("üì± (11) 99999-9999")
        st.caption("üåê www.sistema.com")
    
    # Copyright
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #888; font-size: 0.8em;'>"
        "¬© 2024 Sistema de Gest√£o Financeira para Obras. Todos os direitos reservados."
        "</div>",
        unsafe_allow_html=True
    )

def init_session_state():
    """Inicializa vari√°veis de sess√£o"""
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "üìä Dashboard"
    
    # Remove estados problem√°ticos se existirem
    problematic_keys = ['show_user_config', 'authenticated', 'user']
    for key in list(st.session_state.keys()):
        if any(prob_key in key for prob_key in problematic_keys):
            del st.session_state[key]

def handle_errors():
    """Manipulador global de erros"""
    try:
        main()
    except Exception as e:
        st.error("üö® Ocorreu um erro inesperado no sistema!")
        
        # Em desenvolvimento, mostra detalhes do erro
        if os.getenv('DEBUG', 'False').lower() == 'true':
            st.exception(e)
        else:
            st.info("Por favor, recarregue a p√°gina ou entre em contato com o suporte.")
        
        # Log do erro
        print(f"Erro na aplica√ß√£o: {repr(e)}", file=sys.stderr)
        
        # Bot√£o para recarregar
        if st.button("üîÑ Recarregar P√°gina"):
            # Limpa session state problem√°tico
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

def show_mobile_menu():
    """Menu especial para dispositivos m√≥veis"""
    st.markdown("""
    <div class="mobile-nav-btn" onclick="document.querySelector('.css-1d391kg').style.display = 'block';">
        üì±
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    # Inicializa estado da sess√£o
    init_session_state()
    
    # Executa aplica√ß√£o com tratamento de erros
    handle_errors()