#!/usr/bin/env python3
"""
Script para migrar/corrigir o banco de dados PostgreSQL
Execute: python migrate_db.py
"""

import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor

def migrate_database():
    """Migra o banco de dados para corrigir tipos de dados"""
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL n√£o encontrada. Este script √© apenas para PostgreSQL.")
        return False
    
    try:
        print("üîß Conectando ao PostgreSQL...")
        conn = psycopg2.connect(database_url, cursor_factory=RealDictCursor, sslmode='require')
        cursor = conn.cursor()
        
        print("üóëÔ∏è Removendo tabelas existentes...")
        
        # Remove tabelas na ordem correta (devido √†s foreign keys)
        tables_to_drop = ['arquivos', 'lancamentos', 'categorias', 'obras', 'usuarios']
        
        for table in tables_to_drop:
            try:
                cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")
                print(f"   ‚úÖ Tabela {table} removida")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao remover {table}: {e}")
        
        print("\nüèóÔ∏è Criando tabelas com tipos corretos...")
        
        # Cria tabela de usu√°rios
        cursor.execute("""
            CREATE TABLE usuarios (
                id SERIAL PRIMARY KEY,
                nome VARCHAR(100) NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL,
                senha VARCHAR(255) NOT NULL,
                ativo BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        print("   ‚úÖ Tabela usuarios criada")
        
        # Cria tabela de obras
        cursor.execute("""
            CREATE TABLE obras (
                id SERIAL PRIMARY KEY,
                nome VARCHAR(200) NOT NULL,
                orcamento DECIMAL(15,2) DEFAULT 0,
                data_inicio DATE,
                data_fim_prevista DATE,
                ativo BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        print("   ‚úÖ Tabela obras criada")
        
        # Cria tabela de categorias
        cursor.execute("""
            CREATE TABLE categorias (
                id SERIAL PRIMARY KEY,
                nome VARCHAR(100) NOT NULL,
                descricao TEXT,
                cor VARCHAR(7) DEFAULT '#3498db',
                ativo BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        print("   ‚úÖ Tabela categorias criada")
        
        # Cria tabela de lan√ßamentos
        cursor.execute("""
            CREATE TABLE lancamentos (
                id SERIAL PRIMARY KEY,
                obra_id INTEGER NOT NULL REFERENCES obras(id) ON DELETE CASCADE,
                categoria_id INTEGER NOT NULL REFERENCES categorias(id) ON DELETE RESTRICT,
                descricao TEXT NOT NULL,
                valor DECIMAL(15,2) NOT NULL CHECK (valor > 0),
                data_lancamento DATE NOT NULL,
                observacoes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        print("   ‚úÖ Tabela lancamentos criada")
        
        # Cria tabela de arquivos
        cursor.execute("""
            CREATE TABLE arquivos (
                id SERIAL PRIMARY KEY,
                lancamento_id INTEGER NOT NULL REFERENCES lancamentos(id) ON DELETE CASCADE,
                nome_arquivo VARCHAR(255) NOT NULL,
                tipo_arquivo VARCHAR(100),
                tamanho_arquivo INTEGER,
                conteudo_arquivo BYTEA,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        print("   ‚úÖ Tabela arquivos criada")
        
        # Cria fun√ß√£o para updated_at
        cursor.execute("""
            CREATE OR REPLACE FUNCTION update_updated_at_column()
            RETURNS TRIGGER AS $$
            BEGIN
                NEW.updated_at = CURRENT_TIMESTAMP;
                RETURN NEW;
            END;
            $$ language 'plpgsql';
        """)
        print("   ‚úÖ Fun√ß√£o update_updated_at_column criada")
        
        # Cria triggers
        tables_with_updated_at = ['usuarios', 'obras', 'categorias', 'lancamentos']
        for table in tables_with_updated_at:
            cursor.execute(f"""
                CREATE TRIGGER update_{table}_updated_at
                    BEFORE UPDATE ON {table}
                    FOR EACH ROW
                    EXECUTE FUNCTION update_updated_at_column();
            """)
            print(f"   ‚úÖ Trigger para {table} criado")
        
        # Cria √≠ndices
        indexes = [
            "CREATE INDEX idx_lancamentos_obra_id ON lancamentos(obra_id);",
            "CREATE INDEX idx_lancamentos_categoria_id ON lancamentos(categoria_id);",
            "CREATE INDEX idx_lancamentos_data ON lancamentos(data_lancamento);",
            "CREATE INDEX idx_arquivos_lancamento_id ON arquivos(lancamento_id);",
            "CREATE INDEX idx_usuarios_email ON usuarios(email);"
        ]
        
        for index_sql in indexes:
            cursor.execute(index_sql)
        print("   ‚úÖ √çndices criados")
        
        print("\nüìä Inserindo dados iniciais...")
        
        # Insere usu√°rio padr√£o
        cursor.execute("""
            INSERT INTO usuarios (nome, email, senha, ativo)
            VALUES (%s, %s, %s, %s)
        """, ("Deverson", "deverson@obra.com", "123456", True))
        print("   ‚úÖ Usu√°rio padr√£o criado")
        
        # Insere categorias padr√£o
        categorias_padrao = [
            ("Material de Constru√ß√£o", "Materiais b√°sicos como cimento, areia, brita", "#e74c3c"),
            ("M√£o de Obra", "Pagamentos de funcion√°rios e prestadores", "#3498db"),
            ("Ferramentas e Equipamentos", "Compra e aluguel de ferramentas", "#f39c12"),
            ("El√©trica", "Material e servi√ßos el√©tricos", "#9b59b6"),
            ("Hidr√°ulica", "Material e servi√ßos hidr√°ulicos", "#1abc9c"),
            ("Acabamento", "Materiais de acabamento e pintura", "#34495e"),
            ("Documenta√ß√£o", "Taxas, licen√ßas e documentos", "#95a5a6"),
            ("Transporte", "Fretes e transportes diversos", "#e67e22"),
            ("Alimenta√ß√£o", "Alimenta√ß√£o da equipe", "#27ae60"),
            ("Outros", "Gastos diversos n√£o categorizados", "#7f8c8d")
        ]
        
        for nome, descricao, cor in categorias_padrao:
            cursor.execute("""
                INSERT INTO categorias (nome, descricao, cor, ativo)
                VALUES (%s, %s, %s, %s)
            """, (nome, descricao, cor, True))
        print("   ‚úÖ Categorias padr√£o criadas")
        
        # Insere obra padr√£o
        from datetime import date, timedelta
        data_inicio = date.today()
        data_fim = data_inicio + timedelta(days=365)
        
        cursor.execute("""
            INSERT INTO obras (nome, orcamento, data_inicio, data_fim_prevista, ativo)
            VALUES (%s, %s, %s, %s, %s)
        """, ("Minha Obra", 100000.00, data_inicio, data_fim, True))
        print("   ‚úÖ Obra padr√£o criada")
        
        conn.commit()
        
        print("\nüéâ Migra√ß√£o conclu√≠da com sucesso!")
        print("\nüìã Dados criados:")
        print("   üë§ Usu√°rio: deverson@obra.com / 123456")
        print("   üè∑Ô∏è 10 categorias padr√£o")
        print("   üèóÔ∏è Obra inicial com or√ßamento de R$ 100.000,00")
        print("\n‚úÖ Sistema pronto para uso!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na migra√ß√£o: {repr(e)}")
        if 'conn' in locals():
            conn.rollback()
        return False
    finally:
        try:
            cursor.close()
            conn.close()
        except:
            pass

if __name__ == "__main__":
    print("üöÄ Iniciando migra√ß√£o do banco de dados PostgreSQL...")
    
    if migrate_database():
        print("\n‚úÖ Migra√ß√£o conclu√≠da! Agora voc√™ pode usar o sistema normalmente.")
    else:
        print("\n‚ùå Migra√ß√£o falhou! Verifique os logs acima.")
        sys.exit(1)