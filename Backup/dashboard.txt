import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import date, datetime, timedelta
from utils.helpers import get_dados_dashboard, format_date_br, get_estatisticas_obra
from config.database import get_db_connection

def show_dashboard(user, obra_config):
    """Exibe dashboard principal"""
    # --- ALTERA√á√ÉO AQUI: "Dashboard" para "Tela Inicial" ---
    st.header(f"üè† Tela Inicial - {obra_config['nome_obra']}")
    
    # Buscar dados atualizados
    total_gasto, total_previsto_categorias, gastos_categoria, evolucao, ultimos = get_dados_dashboard()
    
    # Verificar se h√° dados
    if total_gasto == 0:
        st.info("üìä Ainda n√£o h√° lan√ßamentos registrados. V√° em 'Lan√ßamentos' para adicionar gastos.")
        return
    
    # M√©tricas principais
    _show_metricas_principais(total_gasto, total_previsto_categorias, obra_config)
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        _show_grafico_categorias(gastos_categoria)
    # --- Linha duplicada removida: _show_grafico_categorias(gastos_categoria) ---
    
    with col2:
        _show_grafico_evolucao(evolucao)
    
    # Alertas e lan√ßamentos recentes
    _show_alertas_e_recentes(total_gasto, total_previsto_categorias, obra_config, ultimos)

def _show_metricas_principais(total_gasto, total_previsto_categorias, obra_config):
    """Exibe m√©tricas principais"""
    
    # --- ALTERA√á√ÉO AQUI: Inje√ß√£o de CSS para diminuir a fonte das m√©tricas ---
    st.markdown(
        """
        <style>
        /* Altera o tamanho da fonte dos valores dentro dos componentes st.metric */
        div[data-testid="stMetricValue"] {
            font-size: 24px !important; /* Ajuste este valor conforme necess√°rio */
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    orcamento_obra = obra_config['orcamento_total']
    orcamento_referencia = orcamento_obra if orcamento_obra > 0 else total_previsto_categorias
    
    if orcamento_referencia > 0:
        percentual = (total_gasto / orcamento_referencia) * 100
        restante = orcamento_referencia - total_gasto
    else:
        percentual = 0
        restante = 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí∞ Total Gasto",
            f"R\$ {total_gasto:,.2f}",
            delta=None
        )
    
    # --- Linha duplicada removida (contexto f"R\$ {total_gasto:,.2f}", delta=None) ---
    
    with col2:
        st.metric(
            "ÔøΩÔøΩ Or√ßamento Total",
            f"R\$ {orcamento_referencia:,.2f}",
            delta=None
        )
    
    with col3:
        cor_percentual = "normal" if percentual <= 80 else "inverse"
        st.metric(
            "ÔøΩÔøΩ % Executado",
            f"{percentual:.1f}%",
            delta=None,
            delta_color=cor_percentual
        )
    
    with col4:
        cor_restante = "normal" if restante >= 0 else "inverse"
        st.metric(
            "üíµ Restante",
            f"R\$ {restante:,.2f}",
            delta=None,
            delta_color=cor_restante
        )

def _show_grafico_categorias(gastos_categoria):
    """Exibe gr√°fico de gastos por categoria"""
    st.markdown("### üìä Gastos por Categoria")
    
    if gastos_categoria.empty:
        st.info("Nenhum dado dispon√≠vel")
        return
    # --- Linha duplicada removida: if gastos_categoria.empty: st.info("Nenhum dado dispon√≠vel") return ---
    
    # Preparar dados
    df_grafico = gastos_categoria.copy()
    df_grafico['percentual'] = (df_grafico['gasto'] / df_grafico['orcamento_previsto'] * 100).fillna(0)
    
    # Gr√°fico de barras
    fig = go.Figure()
    
    # Barras de or√ßamento previsto
    fig.add_trace(go.Bar(
        name='Or√ßamento Previsto',
        x=df_grafico['nome'],
        y=df_grafico['orcamento_previsto'],
        marker_color='lightblue',
        opacity=0.6
    ))
    
    # Barras de gasto real
    fig.add_trace(go.Bar(
        name='Gasto Real',
        x=df_grafico['nome'],
        y=df_grafico['gasto'],
        marker_color='darkblue'
    ))
    
    fig.update_layout(
        barmode='overlay',
        height=400,
        title="Previsto vs Realizado",
        xaxis_title="Categorias",
        yaxis_title="Valor (R\$)",
        template="plotly_dark"
    )
    # --- Linha duplicada removida: yaxis_title="Valor (R\$)", template="plotly_dark" ) ---
    
    st.plotly_chart(fig, use_container_width=True)

def _show_grafico_evolucao(evolucao):
    """Exibe gr√°fico de evolu√ß√£o mensal"""
    st.markdown("### üìà Evolu√ß√£o Mensal")
    
    if evolucao.empty:
        st.info("Dados insuficientes para evolu√ß√£o mensal")
        return
    
    # Converter m√™s para formato leg√≠vel
    evolucao['mes_nome'] = evolucao['mes'].apply(lambda x: 
        datetime.strptime(x, '%Y-%m').strftime('%b/%Y') if x else 'N/A'
    )
    
    fig = px.line(
        evolucao,
        x='mes_nome',
        y='total',
        title='Gastos Mensais',
        markers=True,
        template="plotly_dark"
    )
    
    fig.update_layout(
        height=400,
        xaxis_title="M√™s",
        yaxis_title="Valor (R\$)"
    )
    # --- Linhas duplicadas removidas: ) e st.plotly_chart(fig, use_container_width=True) ---
    
    st.plotly_chart(fig, use_container_width=True)

def _show_alertas_e_recentes(total_gasto, total_previsto_categorias, obra_config, ultimos):
    """Exibe alertas e lan√ßamentos recentes - VERS√ÉO CORRIGIDA"""
    orcamento_obra = obra_config['orcamento_total']
    orcamento_referencia = orcamento_obra if orcamento_obra > 0 else total_previsto_categorias
    
    if orcamento_referencia > 0:
        percentual = (total_gasto / orcamento_referencia) * 100
        restante = orcamento_referencia - total_gasto
    else:
        percentual = 0
        restante = 0
    
    # Alertas
    st.markdown("### üö® Status do Or√ßamento")
    _show_alerts(percentual, restante)
    
    # Lan√ßamentos recentes - CORRIGIDO
    st.markdown("### üìã √öltimos Lan√ßamentos")
    
    if ultimos.empty:
        st.info("üì≠ Nenhum lan√ßamento encontrado")
        
        # Debug - verificar se h√° dados no banco
        conn = get_db_connection()
        # --- Linha duplicada removida: conn = get_db_connection() ---
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM lancamentos")
        total_lancamentos = cursor.fetchone()[0]
        conn.close()
        
        if total_lancamentos > 0:
            st.warning(f"‚ö†Ô∏è H√° {total_lancamentos} lan√ßamento(s) no banco, mas n√£o aparecem aqui. Verificando...")
            
            # Buscar diretamente
            conn = get_db_connection()
            df_debug = pd.read_sql_query("""
                SELECT l.id, l.data, l.descricao, l.valor, c.nome as categoria, u.nome as usuario
                FROM lancamentos l
                LEFT JOIN categorias c ON l.categoria_id = c.id
                LEFT JOIN usuarios u ON l.usuario_id = u.id
                ORDER BY l.id DESC
                LIMIT 5
            """, conn)
            conn.close()
            
            # --- Linha duplicada removida: if not df_debug.empty: ---
            
            if not df_debug.empty:
                st.markdown("**üîç Lan√ßamentos encontrados diretamente:**")
                for _, lanc in df_debug.iterrows():
                    st.write(f"‚Ä¢ #{lanc['id']} - {lanc['descricao']} - R\$ {lanc['valor']:,.2f}")
        
        return
    
    # Exibir √∫ltimos lan√ßamentos
    for _, lancamento in ultimos.head(5).iterrows():
        with st.container():
            col1, col2, col3 = st.columns([2, 3, 2])
            
            with col1:
                st.write(f"**üìÖ {format_date_br(lancamento['data'])}**")
                st.caption(f"üÜî #{lancamento['id']}")
            
            with col2:
                st.write(f"üìù {lancamento['descricao']}")
                st.caption(f"üè∑Ô∏è {lancamento['categoria']}")
            
            with col3:
                st.write(f"**üí∞ R\$ {lancamento['valor']:,.2f}**")
            # --- Linha duplicada removida: st.write(f"**ÔøΩÔøΩ R\$ {lancamento['valor']:,.2f}**") ---
                st.caption(f"üë§ {lancamento['usuario']}")
            
            st.markdown("---")
            
def _show_alerts(percentual, restante):
    """Exibe alertas baseados no percentual gasto"""
    if percentual > 100:
        st.error(f"üö® **ATEN√á√ÉO CR√çTICA**: Or√ßamento estourado em R\$ {abs(restante):,.2f}!")
        st.markdown("""
        <div style="background: linear-gradient(135deg, #d32f2f 0%, #f44336 100%); 
                    padding: 1rem; border-radius: 8px; color: white; margin: 1rem 0;">
            <strong>‚ö†Ô∏è A√á√ÉO NECESS√ÅRIA:</strong> Revisar gastos imediatamente!
        </div>
        """, unsafe_allow_html=True)
    elif percentual > 90:
        st.warning(f"‚ö†Ô∏è **CUIDADO**: Restam apenas R\$ {restante:,.2f} do or√ßamento!")
        st.markdown("""
        <div style="background: linear-gradient(135deg, #f57c00 0%, #ff9800 100%);
        <!-- --- Linha duplicada removida: <div style="background: linear-gradient(135deg, #f57c00 0%, #ff9800 100%); --- -->
                    padding: 1rem; border-radius: 8px; color: white; margin: 1rem 0;">
            <strong>üìä MONITORAMENTO:</strong> Acompanhar gastos de perto!
        </div>
        """, unsafe_allow_html=True)
    elif percentual > 80:
        st.info(f"üí° **ATEN√á√ÉO**: Voc√™ j√° utilizou {percentual:.1f}% do or√ßamento.")
        st.markdown("""
        <div style="background: linear-gradient(135deg, #1976d2 0%, #2196f3 100%); 
                    padding: 1rem; border-radius: 8px; color: white; margin: 1rem 0;">
            <strong>üìà STATUS:</strong> Planejamento dentro do esperado!
        </div>
        """, unsafe_allow_html=True)
    else:
        st.success(f"‚úÖ **EXCELENTE**: Apenas {percentual:.1f}% do or√ßamento utilizado!")
        st.markdown("""
        <div style="background: linear-gradient(135deg, #388e3c 0%, #4caf50 100%);
        <!-- --- Linha duplicada removida: <div style="background: linear-gradient(135deg, #388e3c 0%, #4caf50 100%); --- -->
                    padding: 1rem; border-radius: 8px; color: white; margin: 1rem 0;">
            <strong>üéØ PARAB√âNS:</strong> Gest√£o financeira eficiente!
        </div>
        """, unsafe_allow_html=True)
