import streamlit as st
import hashlib
import os
import sys # Adicionado para melhor tratamento de exce√ß√µes
import traceback # Adicionado para stack trace completo
from config.database import get_db_connection, get_current_db_type

# --- Fun√ß√µes de Autentica√ß√£o ---

def hash_password(password):
    """Cria um hash SHA256 da senha."""
    return hashlib.sha256(password.encode()).hexdigest()

def login_user(email, password):
    """
    Tenta autenticar um usu√°rio no banco de dados.
    Retorna o dicion√°rio do usu√°rio se a autentica√ß√£o for bem-sucedida, caso contr√°rio, None.
    """
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        db_type = get_current_db_type()

        param_placeholder = '%s' if db_type == 'postgresql' else '?'

        hashed_password = hash_password(password)

        query = f"""
            SELECT id, nome, email, tipo, ativo FROM usuarios
            WHERE email = {param_placeholder} AND senha = {param_placeholder} AND ativo = 1
        """
        
        cursor.execute(query, (email, hashed_password))
        user_data = cursor.fetchone()
        
        if user_data:
            return {
                'id': user_data['id'],
                'nome': user_data['nome'],
                'email': user_data['email'],
                'tipo': user_data['tipo'],
                'ativo': user_data['ativo']
            }
        return None
    except Exception as e:
        print(f"DEBUG AUTH ERROR: Erro ao tentar login: {e}", file=sys.stderr) # Imprimir no console para debug
        st.error("Erro no login. Verifique o email/senha ou contate o suporte.") # Mensagem gen√©rica para o usu√°rio
        return None
    finally:
        if conn:
            conn.close()

def show_login_page():
    """Exibe a p√°gina de login."""
    st.title("üîê Login")

    ensure_first_admin_exists()

    email = st.text_input("Email", key="login_email_input")
    password = st.text_input("Senha", type="password", key="login_password_input")

    if st.button("Entrar", type="primary"):
        if email and password:
            user = login_user(email, password)
            if user:
                st.session_state.user = user
                st.session_state.logged_in = True
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Email ou senha incorretos, ou usu√°rio inativo.")
        else:
            st.warning("Por favor, preencha todos os campos.")

def show_user_header(user, obra_config):
    """Exibe o cabe√ßalho superior da aplica√ß√£o com informa√ß√µes do usu√°rio e da obra."""
    st.markdown(f"""
        <div style="background-color: #2c3e50; padding: 10px; border-radius: 5px; margin-bottom: 20px; display: flex; justify-content: space-between; align-items: center;">
            <div style="color: white; font-size: 1.2em; font-weight: bold;">
                üèóÔ∏è {obra_config.get('nome_obra', 'Nome da Obra')}
            </div>
            <div style="color: #bdc3c7; font-size: 0.9em;">
                Usu√°rio: <strong>{user.get('nome', 'N/A')}</strong> ({user.get('tipo', 'N/A').title()})
            </div>
        </div>
    """, unsafe_allow_html=True)
    
    if st.sidebar.button("Sair", help="Fazer Logout"):
        st.session_state.user = None
        st.session_state.logged_in = False
        st.rerun()

def ensure_first_admin_exists():
    """
    Verifica se existe algum usu√°rio na tabela 'usuarios'.
    Se n√£o houver, cria um usu√°rio 'gestor' padr√£o.
    """
    conn = None
    try:
        print(f"DEBUG AUTH - ensure_first_admin_exists: Iniciando verifica√ß√£o de admin...")
        conn = get_db_connection()
        cursor = conn.cursor()
        db_type = get_current_db_type()

        print(f"DEBUG AUTH - ensure_first_admin_exists: Conex√£o obtida. DB Type: {db_type}")

        # Verifica se j√° existe algum usu√°rio
        print(f"DEBUG AUTH - ensure_first_admin_exists: Executando SELECT COUNT(*) FROM usuarios...")
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        
        # Garante que fetchone() n√£o retorne None antes de tentar acessar [0]
        count_result = cursor.fetchone()
        count = count_result[0] if count_result else 0 # Defensive access
        print(f"DEBUG AUTH - ensure_first_admin_exists: COUNT(*) FROM usuarios retornou: {count}")

        if count == 0:
            print(f"DEBUG AUTH - ensure_first_admin_exists: Nenhum usu√°rio encontrado. Preparando para criar admin.")
            st.warning("Nenhum usu√°rio encontrado. Criando usu√°rio administrador padr√£o.")
            default_email = "admin@obra.com"
            default_password = "admin"
            hashed_default_password = hash_password(default_password)

            param_placeholder_str = '%s' if db_type == 'postgresql' else '?'

            insert_query = f"""
                INSERT INTO usuarios (nome, email, senha, tipo, ativo)
                VALUES ({param_placeholder_str}, {param_placeholder_str}, {param_placeholder_str}, {param_placeholder_str}, 1)
            """
            print(f"DEBUG AUTH - ensure_first_admin_exists: Executando INSERT do admin...")
            cursor.execute(insert_query, ("Administrador", default_email, hashed_default_password, "gestor"))
            conn.commit()
            print(f"DEBUG AUTH - ensure_first_admin_exists: Admin inserido e commitado.")
            st.success(f"Usu√°rio administrador criado: Email '{default_email}', Senha '{default_password}'. Por favor, fa√ßa login.")
            st.info("‚ö†Ô∏è Recomendamos alterar a senha ap√≥s o primeiro login.")
        else:
            print(f"DEBUG AUTH - ensure_first_admin_exists: Usu√°rios encontrados: {count}. Sistema pronto.")
            pass
            
    except Exception as e:
        # Imprime o stack trace completo para o console do Render
        print("DEBUG AUTH ERROR - ensure_first_admin_exists: Exce√ß√£o capturada!", file=sys.stderr)
        traceback.print_exc(file=sys.stderr)
        # st.error(f"Erro ao verificar/criar usu√°rio administrador inicial: {e}") # Evitar "0" direto
        st.error("Erro interno ao configurar o administrador inicial. Verifique os logs do servidor para mais detalhes.")
    finally:
        if conn:
            conn.close()
            print("DEBUG AUTH - ensure_first_admin_exists: Conex√£o fechada.")

if __name__ == "__main__":
    st.set_page_config(layout="centered")
    show_login_page()